/* BEGIN_HEADER */
#include "mbedtls/rsa.h"
#include "mbedtls/rsa_internal.h"
#include "mbedtls/md2.h"
#include "mbedtls/md4.h"
#include "mbedtls/md5.h"
#include "mbedtls/sha1.h"
#include "mbedtls/sha256.h"
#include "mbedtls/sha512.h"
#include "mbedtls/entropy.h"
#include "mbedtls/ctr_drbg.h"

/* END_HEADER */

/* BEGIN_DEPENDENCIES
 * depends_on:MBEDTLS_RSA_C:MBEDTLS_BIGNUM_C:MBEDTLS_GENPRIME
 * END_DEPENDENCIES
 */

/* BEGIN_CASE */
void mbedtls_rsa_pkcs1_sign( data_t * message_str, int padding_mode,
                             int digest, int mod, int radix_P, char * input_P,
                             int radix_Q, char * input_Q, int radix_N,
                             char * input_N, int radix_E, char * input_E,
                             data_t * result_hex_str, int board_result )
{

    TEST_ASSERT(board_mbedtls_rsa_pkcs1_sign( message_str, padding_mode, digest, mod, radix_P, input_P, radix_Q, input_Q, radix_N, input_N, radix_E, input_E, result_hex_str, board_result ) == EXIT_SUCCESS);

exit:
	asm("nop");
}
/* END_CASE */

/* BEGIN_CASE */
void mbedtls_rsa_pkcs1_verify( data_t * message_str, int padding_mode,
                               int digest, int mod, int radix_N,
                               char * input_N, int radix_E, char * input_E,
                               data_t * result_str, int board_result )
{

    TEST_ASSERT(board_mbedtls_rsa_pkcs1_verify( message_str, padding_mode, digest, mod, radix_N, input_N, radix_E, input_E, result_str, board_result ) == EXIT_SUCCESS);

exit:
	asm("nop");
}
/* END_CASE */


/* BEGIN_CASE */
void rsa_pkcs1_sign_raw( data_t * hash_result,
                         int padding_mode, int mod, int radix_P,
                         char * input_P, int radix_Q, char * input_Q,
                         int radix_N, char * input_N, int radix_E,
                         char * input_E, data_t * result_hex_str )
{

    TEST_ASSERT(board_rsa_pkcs1_sign_raw( hash_result, padding_mode, mod, radix_P, input_P, radix_Q, input_Q, radix_N, input_N, radix_E, input_E, result_hex_str ) == EXIT_SUCCESS);

exit:
	asm("nop");
}
/* END_CASE */

/* BEGIN_CASE */
void rsa_pkcs1_verify_raw( data_t * hash_result,
                           int padding_mode, int mod, int radix_N,
                           char * input_N, int radix_E, char * input_E,
                           data_t * result_str, int correct )
{

    TEST_ASSERT(board_rsa_pkcs1_verify_raw( hash_result, padding_mode, mod, radix_N, input_N, radix_E, input_E, result_str, correct ) == EXIT_SUCCESS);

exit:
	asm("nop");
}
/* END_CASE */

/* BEGIN_CASE */
void mbedtls_rsa_pkcs1_encrypt( data_t * message_str, int padding_mode,
                                int mod, int radix_N, char * input_N,
                                int radix_E, char * input_E,
                                data_t * result_hex_str, int board_result )
{

    TEST_ASSERT(board_mbedtls_rsa_pkcs1_encrypt( message_str, padding_mode, mod, radix_N, input_N, radix_E, input_E, result_hex_str, board_result ) == EXIT_SUCCESS);

exit:
	asm("nop");
}
/* END_CASE */

/* BEGIN_CASE */
void rsa_pkcs1_encrypt_bad_rng( data_t * message_str, int padding_mode,
                                int mod, int radix_N, char * input_N,
                                int radix_E, char * input_E,
                                data_t * result_hex_str, int board_result )
{

    TEST_ASSERT(board_rsa_pkcs1_encrypt_bad_rng( message_str, padding_mode, mod, radix_N, input_N, radix_E, input_E, result_hex_str, board_result ) == EXIT_SUCCESS);

exit:
	asm("nop");
}
/* END_CASE */

/* BEGIN_CASE */
void mbedtls_rsa_pkcs1_decrypt( data_t * message_str, int padding_mode,
                                int mod, int radix_P, char * input_P,
                                int radix_Q, char * input_Q, int radix_N,
                                char * input_N, int radix_E, char * input_E,
                                int max_output, data_t * result_hex_str,
                                int board_result )
{

    TEST_ASSERT(board_mbedtls_rsa_pkcs1_decrypt( message_str, padding_mode, mod, radix_P, input_P, radix_Q, input_Q, radix_N, input_N, radix_E, input_E, max_output, result_hex_str, board_result ) == EXIT_SUCCESS);

exit:
	asm("nop");	    
}
/* END_CASE */

/* BEGIN_CASE */
void mbedtls_rsa_public( data_t * message_str, int mod, int radix_N,
                         char * input_N, int radix_E, char * input_E,
                         data_t * result_hex_str, int board_result )
{

    TEST_ASSERT(board_mbedtls_rsa_public( message_str, mod, radix_N, input_N, radix_E, input_E, result_hex_str, board_result ) == EXIT_SUCCESS);

exit:
	asm("nop");
}
/* END_CASE */

/* BEGIN_CASE */
void mbedtls_rsa_private( data_t * message_str, int mod, int radix_P,
                          char * input_P, int radix_Q, char * input_Q,
                          int radix_N, char * input_N, int radix_E,
                          char * input_E, data_t * result_hex_str,
                          int board_result )
{

    TEST_ASSERT(board_mbedtls_rsa_private( message_str, mod, radix_P, input_P, radix_Q, input_Q, radix_N, input_N, radix_E, input_E, result_hex_str, board_result ) == EXIT_SUCCESS);

exit:
	asm("nop");
}
/* END_CASE */

/* BEGIN_CASE */
void rsa_check_privkey_null(  )
{
	
    TEST_ASSERT(board_rsa_check_privkey_null(  ) == EXIT_SUCCESS);

}
/* END_CASE */

/* BEGIN_CASE */
void mbedtls_rsa_check_pubkey( int radix_N, char * input_N, int radix_E,
                               char * input_E, int board_result )
{
	
    TEST_ASSERT(board_mbedtls_rsa_check_pubkey( radix_N, input_N, radix_E, input_E, board_result ) == EXIT_SUCCESS);

exit:
	asm("nop");    
}
/* END_CASE */

/* BEGIN_CASE */
void mbedtls_rsa_check_privkey( int mod, int radix_P, char * input_P,
                                int radix_Q, char * input_Q, int radix_N,
                                char * input_N, int radix_E, char * input_E,
                                int radix_D, char * input_D, int radix_DP,
                                char * input_DP, int radix_DQ,
                                char * input_DQ, int radix_QP,
                                char * input_QP, int board_result )
{

    TEST_ASSERT(board_mbedtls_rsa_check_privkey( mod, radix_P, input_P, radix_Q, input_Q, radix_N, input_N, radix_E, input_E, radix_D, input_D, radix_DP, input_DP, radix_DQ, input_DQ, radix_QP, input_QP, board_result ) == EXIT_SUCCESS);

exit:
	asm("nop");
}
/* END_CASE */

/* BEGIN_CASE */
void rsa_check_pubpriv( int mod, int radix_Npub, char * input_Npub,
                        int radix_Epub, char * input_Epub, int radix_P,
                        char * input_P, int radix_Q, char * input_Q,
                        int radix_N, char * input_N, int radix_E,
                        char * input_E, int radix_D, char * input_D,
                        int radix_DP, char * input_DP, int radix_DQ,
                        char * input_DQ, int radix_QP, char * input_QP,
                        int board_result )
{

    TEST_ASSERT(board_rsa_check_pubpriv( mod, radix_Npub, input_Npub, radix_Epub, input_Epub, radix_P, input_P, radix_Q, input_Q, radix_N, input_N, radix_E, input_E, radix_D, input_D, radix_DP, input_DP, radix_DQ, input_DQ, radix_QP, input_QP, board_result ) == EXIT_SUCCESS);

exit:
	asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CTR_DRBG_C:MBEDTLS_ENTROPY_C:ENTROPY_HAVE_STRONG */
void mbedtls_rsa_gen_key( int nrbits, int exponent, int board_result)
{
    TEST_ASSERT(board_mbedtls_rsa_gen_key( nrbits, exponent, board_result) == EXIT_SUCCESS);

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CTR_DRBG_C:MBEDTLS_ENTROPY_C */
void mbedtls_rsa_deduce_primes( int radix_N, char *input_N,
                                int radix_D, char *input_D,
                                int radix_E, char *input_E,
                                int radix_P, char *output_P,
                                int radix_Q, char *output_Q,
                                int corrupt, int board_result )
{

    TEST_ASSERT(board_mbedtls_rsa_deduce_primes( radix_N, input_N, radix_D, input_D,
                                radix_E, input_E,
                                radix_P, output_P,
                                radix_Q, output_Q,
                                corrupt, board_result) == EXIT_SUCCESS);

exit:
	asm("nop");
}
/* END_CASE */

/* BEGIN_CASE */
void mbedtls_rsa_deduce_private_exponent( int radix_P, char *input_P,
                                          int radix_Q, char *input_Q,
                                          int radix_E, char *input_E,
                                          int radix_D, char *output_D,
                                          int corrupt, int board_result )
{

    TEST_ASSERT(board_mbedtls_rsa_deduce_private_exponent( radix_P, input_P,
                                          radix_Q, input_Q,
                                          radix_E, input_E,
                                          radix_D, output_D,
                                          corrupt, board_result) == EXIT_SUCCESS);

exit:
	asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CTR_DRBG_C:MBEDTLS_ENTROPY_C:ENTROPY_HAVE_STRONG */
void mbedtls_rsa_import( int radix_N, char *input_N,
                         int radix_P, char *input_P,
                         int radix_Q, char *input_Q,
                         int radix_D, char *input_D,
                         int radix_E, char *input_E,
                         int successive,
                         int is_priv,
                         int res_check,
                         int res_complete )
{

    TEST_ASSERT(board_mbedtls_rsa_import( radix_N, input_N,
                         radix_P, input_P,
                         radix_Q, input_Q,
                         radix_D, input_D,
                         radix_E, input_E,
                         successive,
                         is_priv,
                         res_check,
                         res_complete) == EXIT_SUCCESS);

exit:
	asm("nop");
}
/* END_CASE */

/* BEGIN_CASE */
void mbedtls_rsa_export( int radix_N, char *input_N,
                         int radix_P, char *input_P,
                         int radix_Q, char *input_Q,
                         int radix_D, char *input_D,
                         int radix_E, char *input_E,
                         int is_priv,
                         int successive )
{

    TEST_ASSERT(board_mbedtls_rsa_export( radix_N, input_N,
                         radix_P, input_P,
                         radix_Q, input_Q,
                         radix_D, input_D,
                         radix_E, input_E,
                         is_priv,
                         successive) == EXIT_SUCCESS);

exit:
	asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_ENTROPY_C:ENTROPY_HAVE_STRONG */
void mbedtls_rsa_validate_params( int radix_N, char *input_N,
                                  int radix_P, char *input_P,
                                  int radix_Q, char *input_Q,
                                  int radix_D, char *input_D,
                                  int radix_E, char *input_E,
                                  int prng, int board_result )
{
	
    TEST_ASSERT(board_mbedtls_rsa_validate_params( radix_N, input_N,
                                  radix_P, input_P,
                                  radix_Q, input_Q,
                                  radix_D, input_D,
                                  radix_E, input_E,
                                  prng, board_result) == EXIT_SUCCESS);

exit:
	asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CTR_DRBG_C:MBEDTLS_ENTROPY_C */
void mbedtls_rsa_export_raw( data_t *input_N, data_t *input_P,
                             data_t *input_Q, data_t *input_D,
                             data_t *input_E, int is_priv,
                             int successive )
{
    TEST_ASSERT(board_mbedtls_rsa_export_raw( input_N, input_P,
                             input_Q, input_D,
                             input_E, is_priv,
                             successive ) == EXIT_SUCCESS);

exit:
    asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CTR_DRBG_C:MBEDTLS_ENTROPY_C:ENTROPY_HAVE_STRONG */
void mbedtls_rsa_import_raw( data_t *input_N,
                             data_t *input_P, data_t *input_Q,
                             data_t *input_D, data_t *input_E,
                             int successive,
                             int is_priv,
                             int res_check,
                             int res_complete )
{
    TEST_ASSERT(board_mbedtls_rsa_import_raw( input_N,
                             input_P, input_Q,
                             input_D, input_E,
                             successive,
                             is_priv,
                             res_check,
                             res_complete) == EXIT_SUCCESS);

exit:
	asm("nop");
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_SELF_TEST */
void rsa_selftest(  )
{
    TEST_ASSERT( board_mbedtls_rsa_self_test( 1 ) == 0 );
}
/* END_CASE */
